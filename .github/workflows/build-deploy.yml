name: Deploy Infrastructure

on:
  push:
    branches:
      - master
      - develop
      - qa

jobs:
  docker_build:
    name: Docker build and Deploy pipeline
    runs-on: ubuntu-latest
    outputs:
      docker_image: ${{ steps.get_docker_image.outputs.docker_image }}
      environment: ${{ steps.get_enviroment.outputs.environment }}
  
    steps:
    - name: get_enviroment
      run: |
        echo "BRANCH=$(echo $GITHUB_REF | cut -d'/' -f 3)" >> $GITHUB_ENV
        echo "environment=$(echo $GITHUB_REF | cut -d'/' -f 3)" >> $GITHUB_OUTPUT

    - id: get_docker_image
      name: Set env NEED
      run: |
        set -e
        echo $GITHUB_ENV
        export GITHUB_USERNAME="${{ github.actor }}"
        
        if [[ $BRANCH == 'master' && $GITHUB_EVENT_NAME == 'push' ]]; then
            echo "ENV=prod" >> "$GITHUB_ENV"
            export ENV=prod

        elif [[ $BRANCH == 'develop' && $GITHUB_EVENT_NAME == 'push' ]]; then
            echo "ENV=dev" >> "$GITHUB_ENV"
            export ENV=dev

        elif [[ $BRANCH == 'qa' && $GITHUB_EVENT_NAME == 'push' ]]; then
            echo "ENV=qa" >> "$GITHUB_ENV"
            export ENV=qa

        fi
        echo "docker_image=$GITHUB_USERNAME/weather-station:$ENV" >> "$GITHUB_OUTPUT"

    - name: Cloning the repo
      uses: actions/checkout@v1

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push
      uses: docker/build-push-action@v3
      with:
        context: deployments/docker
        push: true
        tags: ${{ steps.get_docker_image.outputs.docker_image }}

  second_pipeline:
    name: Application deployment
    runs-on: ubuntu-latest
    steps:

    - name: Cloning the repo
      uses: actions/checkout@v1
    
    - name: Generate the configs
      run: |
        echo 'Creating the backend.tf'
        cat <<EOF > deployments/terraform/backend.tf
        terraform {
          backend "s3" {
            bucket = "tyncha-bucket"
            key    = "${{ needs.docker_build.outputs.environment }}/state"
            region = "us-east-1"
          }
        }
        EOF

        cat deployments/terraform/backend.tf


    - name: Terraform Init
      uses: hashicorp/terraform-github-actions/init@v0.4.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TF_ACTION_WORKING_DIR: deployments/terraform
        AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Terraform Validate
      uses: hashicorp/terraform-github-actions/validate@v0.3.7

    - name: Terraform Apply
      uses: hashicorp/terraform-github-actions/apply@v0.4.0
      env:
        TF_VAR_docker_image: ${{ needs.docker_build.outputs.docker_image }}
        TF_VAR_environment: ${{ needs.docker_build.outputs.environment }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TF_ACTION_WORKING_DIR: deployments/terraform
        AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}

